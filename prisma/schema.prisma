// schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  cover         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      String[]  // Array of Account IDs
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation String? // ID of TwoFactorConfirmation
  onboarded     Boolean? @default(false)
  description   String?
  city          String?
  school        String?
  work          String?
  website       String?
  createdAt     DateTime  @default(now())
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follower[]      @relation("UserFollowers")
  followings    Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks        Block[]         @relation("BlocksSent")
  blockedBy     Block[]         @relation("BlocksReceived")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String    @db.ObjectId
  likes     Like[]
}

model Like {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @db.ObjectId
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?   @db.ObjectId
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String?   @db.ObjectId
}

model Follower {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  follower    User      @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String    @db.ObjectId
  following   User      @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String    @db.ObjectId
}

model FollowRequest {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  sender      User      @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String    @db.ObjectId
  receiver    User      @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String    @db.ObjectId

  @@unique([senderId, receiverId])
}

model Block {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  blocker    User      @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId  String    @db.ObjectId
  blocked    User      @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId  String    @db.ObjectId

  @@unique([blockerId, blockedId])
}
